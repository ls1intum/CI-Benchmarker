// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const getBuildTimes = `-- name: GetBuildTimes :many
SELECT
    CAST((strftime('%s', r.end_time) - strftime('%s', r.start_time)) AS INTEGER) AS build_time
FROM
    job_results r
WHERE
    r.start_time IS NOT NULL AND r.end_time IS NOT NULL
ORDER BY
    build_time DESC
`

func (q *Queries) GetBuildTimes(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getBuildTimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var build_time int64
		if err := rows.Scan(&build_time); err != nil {
			return nil, err
		}
		items = append(items, build_time)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQueueLatencies = `-- name: GetQueueLatencies :many
SELECT
    CAST((strftime('%s', r.start_time) - strftime('%s', s.creation_time)) AS INTEGER) AS queue_latency
FROM
    scheduled_job s
        INNER JOIN
    job_results r ON s.id = r.id
WHERE
    r.start_time IS NOT NULL
ORDER BY
    queue_latency DESC
`

func (q *Queries) GetQueueLatencies(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getQueueLatencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var queue_latency int64
		if err := rows.Scan(&queue_latency); err != nil {
			return nil, err
		}
		items = append(items, queue_latency)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeJobResult = `-- name: StoreJobResult :one
INSERT INTO job_results (
  id, start_time, end_time
) VALUES (
  ?, ?, ?
)
RETURNING id, start_time, end_time
`

type StoreJobResultParams struct {
	ID        uuid.UUID `json:"id"`
	StartTime string    `json:"start_time"`
	EndTime   string    `json:"end_time"`
}

func (q *Queries) StoreJobResult(ctx context.Context, arg StoreJobResultParams) (JobResult, error) {
	row := q.db.QueryRowContext(ctx, storeJobResult, arg.ID, arg.StartTime, arg.EndTime)
	var i JobResult
	err := row.Scan(&i.ID, &i.StartTime, &i.EndTime)
	return i, err
}

const storeScheduledJob = `-- name: StoreScheduledJob :one
INSERT INTO scheduled_job (
  id, creation_time, executor
) VALUES (
  ?, ?, ?
)
RETURNING id, creation_time, executor, metadata
`

type StoreScheduledJobParams struct {
	ID           uuid.UUID `json:"id"`
	CreationTime string    `json:"creation_time"`
	Executor     string    `json:"executor"`
}

func (q *Queries) StoreScheduledJob(ctx context.Context, arg StoreScheduledJobParams) (ScheduledJob, error) {
	row := q.db.QueryRowContext(ctx, storeScheduledJob, arg.ID, arg.CreationTime, arg.Executor)
	var i ScheduledJob
	err := row.Scan(
		&i.ID,
		&i.CreationTime,
		&i.Executor,
		&i.Metadata,
	)
	return i, err
}

const storeScheduledJobWithMetadata = `-- name: StoreScheduledJobWithMetadata :one
INSERT INTO scheduled_job (
  id, creation_time, executor, metadata
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, creation_time, executor, metadata
`

type StoreScheduledJobWithMetadataParams struct {
	ID           uuid.UUID   `json:"id"`
	CreationTime string      `json:"creation_time"`
	Executor     string      `json:"executor"`
	Metadata     interface{} `json:"metadata"`
}

func (q *Queries) StoreScheduledJobWithMetadata(ctx context.Context, arg StoreScheduledJobWithMetadataParams) (ScheduledJob, error) {
	row := q.db.QueryRowContext(ctx, storeScheduledJobWithMetadata,
		arg.ID,
		arg.CreationTime,
		arg.Executor,
		arg.Metadata,
	)
	var i ScheduledJob
	err := row.Scan(
		&i.ID,
		&i.CreationTime,
		&i.Executor,
		&i.Metadata,
	)
	return i, err
}
